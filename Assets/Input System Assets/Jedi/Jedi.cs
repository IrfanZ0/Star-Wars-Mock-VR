//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input System Assets/Jedi/Jedi.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Jedi
{
    public partial class @Jedi : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Jedi()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Jedi"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""553bb31f-d5f0-4e54-9205-90ae0dc04c80"",
            ""actions"": [
                {
                    ""name"": ""Lightning"",
                    ""type"": ""Button"",
                    ""id"": ""8410fbff-44cd-428d-a6cf-e003f176cc91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hover"",
                    ""type"": ""Button"",
                    ""id"": ""e2acba74-476c-4d6c-aecb-47c47e2b5918"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""4f714b1c-2d70-45de-95ec-8f4e4c5631f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""02b38b6e-4b1f-4f8f-981b-1264e085cd4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""27e14c8b-d497-435e-8aaa-f260b425a37c"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lightning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44a43b18-393c-438b-b1d1-59e2ec9fbb4b"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fa9f65d-cb14-44d7-b45a-56b422170ae4"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""586aa016-0438-4955-9f9c-0860a009a17c"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2c4551b-5c84-429b-a03f-6b3f171408cf"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e114ded3-2138-408a-8752-1c4444600868"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9ed041b-9182-43cb-bb16-54dc8d26361f"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Lightning = m_Player.FindAction("Lightning", throwIfNotFound: true);
            m_Player_Hover = m_Player.FindAction("Hover", throwIfNotFound: true);
            m_Player_Grab = m_Player.FindAction("Grab", throwIfNotFound: true);
            m_Player_Release = m_Player.FindAction("Release", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Lightning;
        private readonly InputAction m_Player_Hover;
        private readonly InputAction m_Player_Grab;
        private readonly InputAction m_Player_Release;
        public struct PlayerActions
        {
            private @Jedi m_Wrapper;
            public PlayerActions(@Jedi wrapper) { m_Wrapper = wrapper; }
            public InputAction @Lightning => m_Wrapper.m_Player_Lightning;
            public InputAction @Hover => m_Wrapper.m_Player_Hover;
            public InputAction @Grab => m_Wrapper.m_Player_Grab;
            public InputAction @Release => m_Wrapper.m_Player_Release;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Lightning.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLightning;
                    @Lightning.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLightning;
                    @Lightning.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLightning;
                    @Hover.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHover;
                    @Hover.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHover;
                    @Hover.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHover;
                    @Grab.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                    @Grab.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                    @Grab.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                    @Release.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRelease;
                    @Release.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRelease;
                    @Release.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRelease;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Lightning.started += instance.OnLightning;
                    @Lightning.performed += instance.OnLightning;
                    @Lightning.canceled += instance.OnLightning;
                    @Hover.started += instance.OnHover;
                    @Hover.performed += instance.OnHover;
                    @Hover.canceled += instance.OnHover;
                    @Grab.started += instance.OnGrab;
                    @Grab.performed += instance.OnGrab;
                    @Grab.canceled += instance.OnGrab;
                    @Release.started += instance.OnRelease;
                    @Release.performed += instance.OnRelease;
                    @Release.canceled += instance.OnRelease;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        public interface IPlayerActions
        {
            void OnLightning(InputAction.CallbackContext context);
            void OnHover(InputAction.CallbackContext context);
            void OnGrab(InputAction.CallbackContext context);
            void OnRelease(InputAction.CallbackContext context);
        }
    }
}
